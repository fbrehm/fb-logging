---

name: "Building OS packages."

on:
  push:
    branches-ignore:
      - dev-**
      - dev/**
      - hf**

env:
  DEBFULLNAME: 'Frank Brehm'
  DEBEMAIL: 'frank@brehm-online.com'
  USED_TIMEZONE: 'Europe/Berlin'

jobs:

  test:
    runs-on: ubuntu-latest
    name: Executing Python tests
    strategy:
      fail-fast: false
      matrix:
        python_version: [ '3.6', '3.7', '3.8', '3.9' ]
    container: python:${{ matrix.python_version }}
    steps:
      - uses: actions/checkout@v2
      - name: Show Environment
        run: python --version
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/install-pip-modules
      - name: Install PyTest with pip
        run: |
          pip install --upgrade --upgrade-strategy eager pytest
          pip list --format columns
      - name: Executing PyTest
        run: pytest --verbose

  linter:
    runs-on: ubuntu-latest
    name: Executing Linters
    container: python:3.9
    env:
      FLAKE8_MAX_LINE_LENGTH: 99
      FLAKE8_MAX_COMPLEXITY: 20
      FLAKE8_IGNORE_ERRORS: 'E226,E302,E41,E402'
    needs:
      - test
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/install-pip-modules
#      - name: Install shellcheck and yamllint
#        run: apt install --yes shellcheck yamllint
      - name: Install flake8 and pylint
        run: |
          pip install --upgrade --upgrade-strategy eager flake8 pylint
          pip list --format columns
      - name: Execute Flake 8
        run: >
          flake8
          --max-line-length=$FLAKE8_MAX_LINE_LENGTH
          --max-complexity=$FLAKE8_MAX_COMPLEXITY
          --ignore=$FLAKE8_IGNORE_ERRORS
          lib
#          bin
#      - name: Execute Shellcheck
#        run: >
#          shellcheck -x compile-xlate-msgs.sh test.py-*.sh test.rc
#          test/call_script.sh test/call_sleep.sh update-env.sh xtract-xlate-msgs.sh
#      - name: Execute Yamllint
#        run: yamllint -c yamllint.yaml .gitlab-ci.yml

  build_debian_sources:
    runs-on: ubuntu-latest
    name: Building Debian Source Packages
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || startsWith( github.ref, 'refs/tags/' ) }}
    container: debian:bullseye
    needs:
      - linter
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/debian-install-buildenv
      - name: Debian build
        run: |
          echo "y" | debuild -S -i -us -uc
          ls -lA --color=always ..
          mkdir -pv debian/pkgs/src
          mv -vi ../*.dsc ../*.tar.* ../*.build* ../*.changes debian/pkgs/src
          ls -lA --color=always debian/pkgs/*/*
      - name: 'Upload Source Package'
        uses: actions/upload-artifact@v2
        with:
          name: debian_sources
          path: debian/pkgs/*/*
          retention-days: 15

  build_debian_bin:
    runs-on: ubuntu-latest
    name: Building Debian Binary Packages
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || startsWith( github.ref, 'refs/tags/' ) }}
    needs:
      - linter
    strategy:
      fail-fast: false
      matrix:
        include:
          - distributor: 'Debian'
            os_codename: 'buster'
            os_release: '10'
            container: 'debian:buster'
            version_prefix: 'deb10'
            compat: '11'
          - distributor: 'Debian'
            os_codename: 'bullseye'
            os_release: '11'
            container: 'debian:bullseye'
            version_prefix: 'deb11'
            compat: '12'
          - distributor: 'Ubuntu'
            os_codename: 'bionic'
            os_release: '18.04'
            container: 'ubuntu:bionic'
            version_prefix: 'ubuntu18.04'
            compat: '11'
          - distributor: 'Ubuntu'
            os_codename: 'focal'
            os_release: '20.04'
            container: 'ubuntu:focal'
            version_prefix: 'ubuntu20.04'
            compat: '12'
    env:
      COMPAT: ${{ matrix.compat }}
      DISTRIBUTOR: ${{ matrix.distributor }}
      OS_CODENAME: ${{ matrix.os_codename }}
      OS_RELEASE: ${{ matrix.os_release }}
      VERSION_PREFIX: ${{ matrix.version_prefix }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Setting timezone
        if: ${{ matrix.distributor == 'Ubuntu' }}
        run: |
          echo "Setting system timezone to ${USED_TIMEZONE} ..."
          ln -fvs /usr/share/zoneinfo/${USED_TIMEZONE} /etc/localtime
          export DEBIAN_FRONTEND=noninteractive
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/debian-install-buildenv
      - name: Updating Changelog
        run: |
          export PKG_VERSION=$( ./get-debian-version )
          export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"
          BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"
          echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"
          debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"
          head -n 5 debian/changelog
      - name: Debian build
        run: |
          echo "Setting debian/compat to ${COMPAT}"
          echo "${COMPAT}" > debian/compat
          echo "y" | debuild -b -i -us -uc
          ls -lA --color=always ..
          mkdir -pv debian/pkgs/src debian/pkgs/${VERSION_PREFIX}
          mv -vi ../*.deb debian/pkgs/${VERSION_PREFIX}
          mv -vi ../*.build* debian/pkgs/src
          ls -lA --color=always debian/pkgs/*/*
      - name: 'Upload Source Package'
        uses: actions/upload-artifact@v2
        with:
          name: debian_bin_pkgs_${{ matrix.version_prefix }}
          path: debian/pkgs/*/*
          retention-days: 15

  notify_success:
    runs-on: ubuntu-latest
    name: Sending Success message
    # if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || startsWith( github.ref, 'refs/tags/' ) }}
    needs:
      # - 'build_debian_sources'
      # - 'build_debian_bin'
      - 'test'
    env:
      NOTIFY_ADDRESS: 'frank@brehm-online.com frank.brehm@pixelpark.com'
      SENDER_ADDRESS: 'github-runner@github.com'
      GITHUB_REPO: ${{ github.repository }}
      GITHUB_REF: ${{ github.ref }}
      GITHUB_ACTOR: ${{ github.actor }}
    steps:
      - name: Sending message
        shell: bash
        continue-on-error: true
        run: |
          MSG="Module ${GITHUB_REPO} (${GITHUB_REF}): all checks and actions successful.\n"
          MSG+="Commiter: ${GITHUB_ACTOR}\n\n"
          MSG+="Cheers, Frank"
          SUBJECT="Github Actions Workflow: Python module fb_logging"
          echo -e "${MSG}" | mailx -s "${SUBJECT}" -r "${SENDER_ADDRESS}" ${NOTIFY_ADDRESS}

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list
