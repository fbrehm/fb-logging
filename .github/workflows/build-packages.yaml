---

# name: "Building OS packages with a shared workflow."
name: "Testing and building OS packages."

################################################################################
# yamllint disable-line rule:truthy
on:
  push:
    branches-ignore:
      - 'dev-**'
      - 'dev/**'
      - 'hf**'
      - 'old**'
      - 'feature**'
    tags:
      - '**'

################################################################################
# These environments can be overridden in the GUI
env:
  DEBFULLNAME: 'Frank Brehm'
  DEBEMAIL: 'frank@brehm-online.com'
  FB_REPO_IN_DIR: '/var/www/incoming'
  GPG_KEY_ID: '87A8DBD6B796E12A'
  GPG_PASSWORD_FILE: '.private/uhu.txt'
  NOTIFY_ADDRESS: 'frank@brehm-online.com,frank.brehm@pixelpark.com'
  SENDER_ADDRESS: 'Frank Brehm <frank@brehm-online.com>'
  SMTP_SERVER_ADDRESS: 'mail.uhu-banane.net'
  SMTP_SERVER_PORT: 587
  USED_TIMEZONE: 'Europe/Berlin'
  PKG_NAME: 'fb-logging'
  MODULE_DIR: 'src/fb_logging'
  INDEX_FILE: 'src/fb_logging/__init__.py'
  RETENTION_DAYS: 15
  OWN_REPO_SERVER_URL: 'https://repo.uhu-banane.de'
  OWN_YUM_REPO_NAME: 'frank-brehm'
  OWN_YUM_REPO_DESCRIPTION: 'Frank Brehms Yum repository for Enterprise Linux %s'
  OWN_YUM_REPO_ROOT_PATH: '/Yum'

################################################################################
jobs:

  ###########################
  test:
    runs-on: ubuntu-latest
    name: Executing Python tests
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.9', '3.10', '3.11', '3.12' ]
    container: python:${{ matrix.python_version }}
    steps:
      - uses: actions/checkout@v2
      - name: Show Environment
        run: python --version
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/install-pip-modules
        with:
          install_pytest: true
      - name: Executing PyTest
        id: exec-pytest
        shell: bash
        run: |
          echo "Executing pytest ..."
          source .venv/bin/activate
          pytest --verbose

  ###########################
  linter:
    runs-on: ubuntu-latest
    name: Executing Linters
    container: python:3.12
    needs:
      - test
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/install-pip-modules
        with:
          install_linter_tools: true

      - name: "Checking package version against tag."
        shell: bash
        run: |
          echo "Getting package version from '${INDEX_FILE}' ..."
          PACKAGE_VERSION=$( cat "${INDEX_FILE}" | \
              grep -P '^__version__(\s|=)' | \
              sed -e "s/^[^'\"]*['\"]//" -e "s/['\"][ 	]*\$//" )
          echo "::notice::Package version: '${PACKAGE_VERSION}'"
          if echo "${GITREF}" | grep -q -P '^refs/tags/' ; then
              TAG_VERSION=$( echo "${GITREF}" | sed -e 's|^refs/tags/||' )
              if [[ "${PACKAGE_VERSION}" == "${TAG_VERSION}" ]] ; then
              echo "::notice::Tag and package version '${TAG_VERSION}' are okay."
              else
                  echo "::error::Tag '${TAG_VERSION}' does not match package version '${PACKAGE_VERSION}'" >&2
                  exit 5
              fi
          fi

      - name: "Comparing package version in debian/changlog and in index file."
        shell: bash
        run: |
          echo "Getting package version from '${INDEX_FILE}' ..."
          PACKAGE_VERSION=$( cat "${INDEX_FILE}" | \
              grep -P '^__version__(\s|=)' | \
              sed -e "s/^[^'\"]*['\"]//" -e "s/['\"][ 	]*\$//" )
          echo "::notice::Package version: '${PACKAGE_VERSION}'"
          if [[ -f debian/changelog ]] ; then
              DEBIAN_PKG_VERSION=$( head -n 1 debian/changelog | sed -e 's/^[^(]*(//' -e 's/).*//' )
              echo "Debian package version: '${DEBIAN_PKG_VERSION}'"
              if [[ "${PACKAGE_VERSION}" == "${DEBIAN_PKG_VERSION}" ]] ; then
                  echo "::notice::Debian package version and package version '${DEBIAN_PKG_VERSION}' are matching."
              else
                  echo "::error::Debian package version '${DEBIAN_PKG_VERSION}' does not match package version '${PACKAGE_VERSION}'" >&2
                  exit 5
              fi
            else
                echo "::error::File 'debian/changelog' not found." >&2
              exit 7
          fi

      - name: Execute Flake 8
        shell: bash
        run: |
          echo "Executing flake8 ..."
          source .venv/bin/activate
          echo "Flake8 version:"
          flake8 --version
          echo "And fire ..."
          flake8 "${MODULE_DIR}" test

  ###########################
  build_debian_sources:
    runs-on: ubuntu-latest
    name: Building Debian Source Packages
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/test') || startsWith(github.ref, 'refs/heads/build') || startsWith(github.ref, 'refs/tags/') }}
    container: debian:bookworm
    needs:
      - linter
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-debian-container

      - name: 'Install Debian Python Build Environment'
        uses: fbrehm/debian-install-python-buildenv@main
        with:
          additional_packages: 'python3-click python3-semver pybuild-plugin-pyproject flit'

      - name: "Set and show Environment"
        shell: bash
        run: |
          echo "Updating GITHUB_ENV ..."
          export PKG_NAME=$( head -n 1 debian/changelog | awk '{print $1}' )
          export PKG_VERSION=$( head -n 1 debian/changelog | sed -e "s/^[^(]*(//" -e "s/).*//" )
          export SIGNING_HOOK_SCRIPT="${HOME}/signing-hook-script.sh"

          echo "PKG_NAME=${PKG_NAME}" >>"$GITHUB_ENV"
          echo "PKG_VERSION=${PKG_VERSION}" >>"$GITHUB_ENV"
          echo "SIGNING_HOOK_SCRIPT=${SIGNING_HOOK_SCRIPT}" >>"$GITHUB_ENV"

          echo "::notice::Building Debian source package on Debian ${DEBIAN_VERSION}."
          if [[ -f /etc/os-release ]] ; then
              echo -e "\nOS release for building source package:"
              cat /etc/os-release
          fi
          echo -e "\nBash enviroment:"
          env | sort
          echo ""
          echo "::notice::Python version: $(python3 --version)"
          echo ""
          echo "Removing setup.py ..."
          rm -fv setup.py

      - name: 'Preparing GPG for signing files without entering a password'
        uses: fbrehm/github-setup-gpg@main
        with:
          public_key: ${{ secrets.GPG_PUBLIC_KEY }}
          private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          key_password: ${{ secrets.GPG_KEY_PASSWORD }}
          password_file: ${{ env.GPG_PASSWORD_FILE }}
          key_id: ${{ env.GPG_KEY_ID }}

      - name: 'Create signing hook script of building source package.'
        shell: bash
        run: |
          dsc_file="${PKG_NAME}_${PKG_VERSION}.dsc"
          buildinfo_file="${PKG_NAME}_${PKG_VERSION}_source.buildinfo"
          changes_file="${PKG_NAME}_${PKG_VERSION}_source.changes"
          password_file_abs=$( readlink --canonicalize-missing "${GPG_PASSWORD_FILE}" )

          if [[ -e "${password_file_abs}" ]] ; then
            hash_bang='#!/usr/bin/env bash'
            shell_lines=$( cat <<-EOF
          	${hash_bang}
          	echo
          	echo "This is the signing script."
          	echo "==========================="
          	echo
          	printf "Command line: "
          	echo \$0 \$*
          	printf "Pwd: "
          	pwd
          	echo
          	echo "Current sources:"
          	ls -l --color=always '${dsc_file}' '${buildinfo_file}' '${changes_file}'
          	echo
          	cmd="echo 'y' | debsign -k${{ inputs.key_id }} '${dsc_file}' '${buildinfo_file}' '${changes_file}'"
          	echo "Executing: \$cmd"
          	eval \$cmd
          	echo
          	echo "Signed sources:"
          	ls -l --color=always '${dsc_file}' '${buildinfo_file}' '${changes_file}'
          	echo
          	EOF
            )

            echo "${shell_lines}" > "${SIGNING_HOOK_SCRIPT}"
            chmod +x --verbose "${SIGNING_HOOK_SCRIPT}"

            echo -e "\nGenerated ${SIGNING_HOOK_SCRIPT}:"
            cat "${SIGNING_HOOK_SCRIPT}"
            echo "<--"

            echo -e "\nThe imported private keys:"
            gpg --list-secret-keys
            echo "<-- EOF"

          else

            echo -e "\nDon't create '${SIGNING_HOOK_SCRIPT}' because of failing necessary data."

          fi

      - name: 'Finally build the source package.'
        shell: bash
        run: |
          PASSWORD_FILE_ABS=$( readlink --canonicalize-missing "${GPG_PASSWORD_FILE}" )
          if [[ -e "${PASSWORD_FILE_ABS}" && -x "${SIGNING_HOOK_SCRIPT}" ]] ; then
            echo "::notice title=build-debian-source-package::Building signed Debian source package for ${PKG_NAME}-${PKG_VERSION}"
            echo "y" | debuild --signing-hook="${SIGNING_HOOK_SCRIPT}" -S -i
          else
            echo "::notice title=build-debian-source-package::Building unsigned Debian source package for ${PKG_NAME}-${PKG_VERSION}"
            debuild -S -i --no-sign
          fi

          echo -e "\nGenerated stuff:"
          ls -lA --color=always ..
          echo "<-- EOF"

          echo -e "\nMoving all to the right place ..."
          mkdir -pv debian/pkgs/src
          mv -vi ../*.dsc ../*.tar.* ../*.build* ../*.changes debian/pkgs/src

          echo -e "\nStuff now at the right place:"
          ls -lA --color=always debian/pkgs/*/*
          echo "<-- EOF"

      - name: 'Upload Source Package'
        uses: actions/upload-artifact@v4
        with:
          name: debian_sources
          path: debian/pkgs/*/*
          retention-days: ${{ env.RETENTION_DAYS }}

  ###########################
  build_debian_bin:
    runs-on: ubuntu-latest
    name: Building Debian Binary Packages
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/test') || startsWith(github.ref, 'refs/heads/build') || startsWith(github.ref, 'refs/tags/') }}
    needs:
      - linter
    strategy:
      fail-fast: false
      matrix:
        include:
          - distributor: 'Debian'
            os_codename: 'bookworm'
            os_release: '12'
            container: 'debian:bookworm'
            version_prefix: 'deb12'
            compat: '12'
          - distributor: 'Debian'
            os_codename: 'trixie'
            os_release: '13'
            container: 'debian:trixie'
            version_prefix: 'deb13'
            compat: '13'
          - distributor: 'Ubuntu'
            os_codename: 'noble'
            os_release: '24.04'
            container: 'ubuntu:noble'
            version_prefix: 'ubuntu24.04'
            compat: '12'
    env:
      COMPAT: ${{ matrix.compat }}
      DISTRIBUTOR: ${{ matrix.distributor }}
      OS_CODENAME: ${{ matrix.os_codename }}
      OS_RELEASE: ${{ matrix.os_release }}
      VERSION_PREFIX: ${{ matrix.version_prefix }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v4
      - name: Setting timezone
        if: ${{ matrix.distributor == 'Ubuntu' }}
        run: |
          echo "Setting system timezone to ${USED_TIMEZONE} ..."
          ln -fvs /usr/share/zoneinfo/${USED_TIMEZONE} /etc/localtime
          export DEBIAN_FRONTEND=noninteractive
      - uses: ./.github/actions/prepare-debian-container

      - name: 'Install Debian Python Build Environment'
        uses: fbrehm/debian-install-python-buildenv@main
        with:
          additional_packages: 'python3-click python3-semver pybuild-plugin-pyproject flit'

      - name: "Set and show Environment"
        shell: bash
        run: |
          echo "Updating GITHUB_ENV ..."
          export PKG_NAME=$( head -n 1 debian/changelog | awk '{print $1}' )
          export PKG_VERSION=$( head -n 1 debian/changelog | sed -e "s/^[^(]*(//" -e "s/).*//" )
          export SIGNING_HOOK_SCRIPT="${HOME}/signing-hook-script.sh"
          export BUILD_VERSION="${PKG_VERSION}+${{ matrix.version_prefix }}"

          echo "PKG_NAME=${PKG_NAME}" >>"$GITHUB_ENV"
          echo "PKG_VERSION=${PKG_VERSION}" >>"$GITHUB_ENV"
          echo "SIGNING_HOOK_SCRIPT=${SIGNING_HOOK_SCRIPT}" >>"$GITHUB_ENV"
          echo "BUILD_VERSION=${BUILD_VERSION}" >>"$GITHUB_ENV"

          echo "::notice::Building Debian source package on Debian ${DEBIAN_VERSION}."
          if [[ -f /etc/os-release ]] ; then
              echo -e "\nOS release for building binary package:"
              cat /etc/os-release
          fi
          echo -e "\nBash enviroment:"
          env | sort
          echo ""
          echo "::notice::Python version: $(python3 --version)"
          echo ""
          echo "Removing setup.py ..."
          rm -fv setup.py

      - name: 'Preparing GPG for signing files without entering a password'
        uses: fbrehm/github-setup-gpg@main
        with:
          public_key: ${{ secrets.GPG_PUBLIC_KEY }}
          private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          key_password: ${{ secrets.GPG_KEY_PASSWORD }}
          password_file: ${{ env.GPG_PASSWORD_FILE }}
          key_id: ${{ env.GPG_KEY_ID }}

      - name: "Updating Changelog"
        run: |
          export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"
          BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"
          echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"
          debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"
          head -n 5 debian/changelog

      - name: 'Create signing hook script of building source package.'
        shell: bash
        run: |
          dsc_file="${PKG_NAME}_${PKG_VERSION}.dsc"
          buildinfo_file="${PKG_NAME}_${PKG_VERSION}_source.buildinfo"
          changes_file="${PKG_NAME}_${PKG_VERSION}_source.changes"
          password_file_abs=$( readlink --canonicalize-missing "${GPG_PASSWORD_FILE}" )

          if [[ -e "${password_file_abs}" ]] ; then
            hash_bang='#!/usr/bin/env bash'
            shell_lines=$( cat <<-EOF
          	${hash_bang}
          	echo
          	echo "This is the signing script."
          	echo "==========================="
          	echo
          	printf "Command line: "
          	echo \$0 \$*
          	printf "Pwd: "
          	pwd
          	echo
          	echo "Current packages:"
          	ls -l --color=always *.deb
          	echo
          	cmd="echo 'y' | debsign --sign=origin --default-key=${GPG_KEY_ID} *.deb\'"
          	echo "Executing: \$cmd"
          	echo
          	eval \$cmd
          	echo
          	echo "Signed packages:"
          	ls -l --color=always *.deb
          	echo
          	EOF
            )

            echo "${shell_lines}" > "${SIGNING_HOOK_SCRIPT}"
            chmod +x --verbose "${SIGNING_HOOK_SCRIPT}"

            echo -e "\nGenerated ${SIGNING_HOOK_SCRIPT}:"
            cat "${SIGNING_HOOK_SCRIPT}"
            echo "<--"

            echo -e "\nThe imported private keys:"
            gpg --list-secret-keys
            echo "<-- EOF"

          else

            echo -e "\nDon't create '${SIGNING_HOOK_SCRIPT}' because of failing necessary data."

          fi

      - name: Debian build packages
        run: |
          PASSWORD_FILE_ABS=$( readlink --canonicalize-missing "${GPG_PASSWORD_FILE}" )
          if [[ -e "${PASSWORD_FILE_ABS}" && -x "${SIGNING_HOOK_SCRIPT}" ]] ; then
            echo "::notice title=build-debian-binary-packages::Building signed Debian binary packages for ${PKG_NAME}-${PKG_VERSION}"
            echo "y" | debuild --signing-hook="${SIGNING_HOOK_SCRIPT}" -b -i -us -uc -ui
          else
            echo "::notice title=build-debian-binary-packages::Building unsigned Debian binary packages for ${PKG_NAME}-${PKG_VERSION}"
            debuild -b -i --no-sign
          fi

          echo -e "\nGenerated stuff:"
          ls -lA --color=always ..
          echo "<-- EOF"

          echo -e "\nMoving all to the right place ..."
          mkdir -pv debian/pkgs/${VERSION_PREFIX}
          mv -vi ../*.deb ../*.build* debian/pkgs/${VERSION_PREFIX}

          echo -e "\nStuff now at the right place:"
          ls -lA --color=always debian/pkgs/*/*
          echo "<-- EOF"

      - name: 'Upload Binary Package'
        uses: actions/upload-artifact@v4
        with:
          name: debian_bin_pkgs_${{ matrix.version_prefix }}
          path: debian/pkgs/*/*
          retention-days: ${{ env.RETENTION_DAYS }}

  ###########################
  build_rpm:
    runs-on: ubuntu-latest
    name: Building RPM packages for Enterprise Linux
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/test') || startsWith(github.ref, 'refs/heads/build') || startsWith(github.ref, 'refs/tags/') }}
    needs:
      - linter
    strategy:
      fail-fast: false
      matrix:
        include:
          - title: 'Enterprise Linux 9'
            el_version: '9'
            py_minor_version: '9'
            py_version_dot: '3'
            py_version_nodot: '3'
            image: 'rockylinux:9'
            epel_package: 'epel-release'
            has_powertools: false
          # - title: 'Enterprise Linux 10'
          #   el_version: '10'
          #   py_minor_version: '10'
          #   py_version_dot: '3'
          #   py_version_nodot: '3'
          #   image: 'rockylinux:10'
          #   has_powertools: false
          #   epel_package: 'epel-release'
    container: ${{ matrix.image }}
    env:
      EL_TITLE: ${{ matrix.title }}
      EL_VERSION: ${{ matrix.el_version }}
      EPEL_PACKAGE: ${{ matrix.epel_package }}
      PY_VERSION_DOT: ${{ matrix.py_version_dot}}
      PY_VERSION_NODOT: ${{ matrix.py_version_nodot}}
      PYTHON: "python${{ matrix.py_version_nodot}}"
      USED_CHARSET: 'utf8'
      USED_LOCALE: 'en_US'
      USED_LC: 'en_US.utf8'
      MAN_SECTION: 1

    steps:
      - uses: actions/checkout@v4
      - name: "Set and show Environment"
        shell: bash
        run: |
          echo "Updating GITHUB_ENV ..."
          export PKG_NAME=$( head -n 1 debian/changelog | awk '{print $1}' )
          export PKG_VERSION=$( head -n 1 debian/changelog | sed -e "s/^[^(]*(//" -e "s/).*//" )
          export PKG_RELEASE=$( ./get-rpm-release )
          export PKG_BUILD_VERSION="${PKG_VERSION}-${PKG_RELEASE}"
          export OS_TITLE=$( cat /etc/os-release | \
              grep '^PRETTY_NAME=' | \
              sed -e 's/^PRETTY_NAME=//' -e 's/"//g' )
          export RPM_SRC_DIR_BASE="${PYTHON}_${PKG_NAME}-${PKG_VERSION}"
          export RPM_SRC_DIR="rpmdir/SOURCES/${RPM_SRC_DIR_BASE}"
          export SPECFILE="${PKG_NAME}.spec"

          export DNF_ENABLE_REPO="--enablerepo=devel"
          if [[ "${{ matrix.has_powertools }}" == true ]] ; then
            DNF_ENABLE_REPO+=" --enablerepo=powertools"
          fi

          echo "DNF_ENABLE_REPO=${DNF_ENABLE_REPO}" >>"$GITHUB_ENV"
          echo "OS_TITLE=${OS_TITLE}" >>"$GITHUB_ENV"
          echo "PKG_NAME=${PKG_NAME}" >>"$GITHUB_ENV"
          echo "PKG_VERSION=${PKG_VERSION}" >>"$GITHUB_ENV"
          echo "PKG_RELEASE=${PKG_RELEASE}" >>"$GITHUB_ENV"
          echo "PKG_BUILD_VERSION=${PKG_BUILD_VERSION}" >>"$GITHUB_ENV"
          echo "TZ=${TZ}" >>"$GITHUB_ENV"
          echo "RPM_SRC_DIR_BASE=${RPM_SRC_DIR_BASE}" >>"$GITHUB_ENV"
          echo "RPM_SRC_DIR=${RPM_SRC_DIR}" >>"$GITHUB_ENV"
          echo "SPECFILE=${SPECFILE}" >>"$GITHUB_ENV"

          echo "::notice::Building RPM packages on ${OS_TITLE}."
          echo -e "\nOS release:"
          cat /etc/os-release
          echo "<--"

          echo "\n"
          echo "::notice::Python version: $(python3 --version)"
          echo "\n"

          echo -e "\nBash enviroment:"
          env | sort

          echo "Ensuring '/usr/local/bin'"
          mkdir -p -v /usr/local/bin

          echo -n "\nCreating get-entrypoints.awk ..."
          lines=$( cat <<-EOF
          	BEGIN {
          	    target_section = "project.scripts"
          	    in_section = 0
          	}

          	{
          	    # Cleaning row: removing leading and trailing whitespaces and cut before comment character
          	    line = $0
          	    sub(/^[ \t]+/, "", line)
          	    sub(/[ \t]+$/, "", line)
          	    sub(/[ \t]*[#;].*$/, "", line)

          	    # Skip on empty row
          	    if (line == "") {
          	        next
          	    }

          	    # Check for section header
          	    if (line ~ /^\[.*\]$/) {
          	        section = substr(line, 2, length(line) - 2)
          	        if (section == target_section) {
          	            in_section = 1
          	        } else {
          	            in_section = 0
          	        }
          	        next
          	    }

          	    # Perform key-value-pair in target section
          	    if (in_section == 1) {
          	        if (line ~ /^[a-zA-Z0-9_-]+[ \t]*=[ \t]*.*$/) {
          	            # extract and print key
          	            split(line, a, /[ \t]*=[ \t]*/)
          	            print a[1]
          	        }
          	    }
          	}
          	EOF
          )
          echo "${lines}" > "get-entrypoints.awk"

          echo -e "\nContent of 'get-entrypoints.awk':"
          cat "get-entrypoints.awk"
          echo "<--"

          echo -e "\nGet all entry points ..."
          ENTRYPONTS=''
          for entrypoint in $( awk -f "get-entrypoints.awk" pyproject.toml ; do
              if [[ -n "${ENTRYPONTS}" ]] ; then
                  ENTRYPONTS+=" "
              fi
              ENTRYPONTS+="${entrypoint}"
          done
          echo "ENTRYPONTS=${ENTRYPONTS}" >>"$GITHUB_ENV"
          if [[ -n "${ENTRYPONTS}" ]] ; then
              echo -e "\nFound entrypoints:"
              for entrypoint in ${ENTRYPONTS}; do
                  echo " * ${entrypoint}"
              done
          else
              echo "Did not found any entrypoints."
          fi

      - name: "Checking and updating locales."
        shell: bash
        run: |
          echo -e "\nAll locales:"
          locale -a
          echo -e "\nInstalling locales ..."
          langpacks='langpacks-en'
          echo " * en"
          if [[ -n "${ADDITIONAL_LOCALES}" ]] ; then
              for my_lc in "${ADDITIONAL_LOCALES}" ; do
                  base_lang=$( echo "${my_lc}" | sed -e 's/\..*//'  -e 's/_.*//' )
                  echo " * ${base_lang}"
                  langpack="langpacks-${base_lang}"
                  langpacks+=" ${langpack}"
              done
          fi
          echo -e "\nInstalling language packs ${langpacks}"
          cmd="dnf ${DNF_ENABLE_REPO} --assumeyes install glibc-all-langpacks ${langpacks}"
          echo -e "\nCalling: ${cmd}"
          eval ${cmd}
          echo -e "\nAll locales:"
          locale -a
          echo -e "\nCurrent locales:"
          locale
          export LC_ALL="${USED_LC}"
          echo "LC_ALL=${LC_ALL}" >>"$GITHUB_ENV"
          echo -e "\nCurrent locales again:"
          locale

      - name: "Adding own YUM repository"
        shell: bash
        env:
          REPO_FILE: /etc/yum.repos.d/${{ env.OWN_YUM_REPO_NAME }}.repo
        run: |
          echo -e "Root path for URL: '${OWN_YUM_REPO_ROOT_PATH}'"

          if [[ ! -d /etc/yum.repos.d/ ]] ; then
              echo "::error title=add-own-yum-repo::Directory '/etc/yum.repos.d' not found or is not a directory."
              exit 5
          fi

          URL="${OWN_REPO_SERVER_URL}${OWN_YUM_REPO_ROOT_PATH}/el-${EL_VERSION}"
          DESC=$( printf "${OWN_YUM_REPO_DESCRIPTION}" "${EL_VERSION}" )

          echo -e "\nCreating '${REPO_FILE}' ..."
          lines=$( cat <<-EOF
          	[${OWN_YUM_REPO_NAME}]
          	name=${DESC}
          	baseurl=${URL}
          	enabled=1
          	gpgcheck=0
          	repo_gpgcheck=0
          	EOF
          )
          echo "${lines}" > "${REPO_FILE}"

          echo -e "\nContent of '${REPO_FILE}':"
          cat "${REPO_FILE}"
          echo "<--"

      - name: "Install EPEL repo"
        shell: bash
        run: dnf --assumeyes install "${EPEL_PACKAGE}"

      - name: "Show all used YUM repos"
        shell: bash
        run: |
          echo -e "All current installed YUM repo definitions:"
          dnf ${DNF_ENABLE_REPO} repolist --all

      - name: Upgrade all packages
        shell: bash
        env:
          LC_ALL: "en_US.utf8"
        run: |
          echo "Cleaning dnf ..."
          dnf clean all
          echo
          echo "dnf makecache ..."
          dnf makecache
          echo
          echo "Upgrading all packages"
          dnf ${DNF_ENABLE_REPO} --assumeyes upgrade

      - name: 'Install TZdata'
        shell: bash
        run: |
          if rpm -qa | grep '^tzdata-' >/dev/null ; then
            echo -e "\nReinstalling tzdata ..."
            dnf ${DNF_ENABLE_REPO} --assumeyes reinstall tzdata || true
          else
            echo -e "\nInstalling tzdata ..."
            dnf ${DNF_ENABLE_REPO} --assumeyes install tzdata || true
          fi
          echo -e "\nFile /usr/share/zoneinfo/zone.tab:"
          ls -l --color=always /usr/share/zoneinfo/zone.tab

      - name: 'Install Python 3'
        shell: bash
        run: |
          echo "Installing Python ${{ matrix.py_version_nodot}} ..."

          cmd="dnf ${DNF_ENABLE_REPO} --assumeyes install ${PYTHON}"
          cmd+=" ${PYTHON}-setuptools ${PYTHON}-pip ${PYTHON}-devel ${PYTHON}-babel"
          cmd+=" ${PYTHON}-pytz ${PYTHON}-chardet ${PYTHON}-six"
          cmd+=" ${PYTHON}-flit ${PYTHON}-click"

          echo -e "\nCalling: ${cmd}"
          eval ${cmd}

          echo -e "\nPython binaries:"
          ls -l --color=always /bin/python* /bin/pip* || true

          echo -e "\nInstalling Python-Debian, packaging and click-man with pip3 ..."
          pip3 install python-debian packaging

          echo -e "\nPip3 list:"
          pip3 list --format columns

      - mame: "Installing all necessary PIP modules in .venv ..."
        uses: ./.github/actions/install-pip-modules

      - name: 'Installing build tools'
        shell: bash
        run: |
          echo "Installing build tools"

          cmd="dnf ${DNF_ENABLE_REPO} --assumeyes install gnupg2 rpm-build rpm-sign gettext"
          echo -e "\nCalling: ${cmd}"
          eval ${cmd}

      - name: 'Preparing GPG for signing files without entering a password'
        uses: fbrehm/github-setup-gpg@main
        with:
          public_key: ${{ secrets.GPG_PUBLIC_KEY }}
          private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          key_password: ${{ secrets.GPG_KEY_PASSWORD }}
          password_file: ${{ env.GPG_PASSWORD_FILE }}
          key_id: ${{ env.GPG_KEY_ID }}

      - name: 'Creating man pages'
        shell: bash
        run: |
          if [[ -n "${ENTRYPONTS}" ]] ; then
              man_dir="usr/share/man/man${MAN_SECTION}"
              echo -e "\nGenerating MAN pages in '${man_dir}'."

              mkdir -p -v "${man_dir}"
              source .venv/bin/activate
              echo -e "\nCurrent PATH: '${PATH}'"

              echo -e "\nInstalling entrypoints ..."
              flit install --deps production --python .venv/bin/python3

              echo -e "\nInstalling click-man ..."
              pip3 install click-man

              for entrypoint in ${ENTRYPONTS}; do
                  cmd="click-man --target \"${man_dir}\" --man-version ${MAN_SECTION} \"${entrypoint}\""
                  echo -e "\nCalling: ${cmd}"
                  eval ${cmd}
              done

              ls -l --color=always "${man_dir}"
          fi

          # for script in bin/* ; do
          #     if [[ ! -x "${script}" ]] ; then
          #         continue
          #     fi
          #     script_base=$( basename "${script}" )
          #     man_file_base="${script_base}.${MAN_SECTION}.gz"
          #     man_file="${man_dir}/${man_file_base}"
          #     echo "  * ${man_file_base}"
          #     cmd="help2man --no-info --no-discard-stderr"
          #     cmd+=" --version-string \"${PKG_VERSION}\""
          #     cmd+=" --section ${MAN_SECTION}"
          #     cmd+=" \"${script}\" | gzip -v9"
          #     echo "      Executing: ${cmd} > \"${man_file}\""
          #     eval ${cmd} > "${man_file}"
          # done

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list
