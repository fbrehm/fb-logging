---

stages:
  - test
  - linter
  - build
  - sign
  - deploy

include:
  - project: 'python/packaging'
    ref: main
    file: 'gitlab/python-tests.yaml'
  - project: 'python/packaging'
    ref: main
    file: 'gitlab/linter.yaml'

# ---------------------------
# Global variables
variables:
  DEBFULLNAME: 'Frank Brehm'
  DEBEMAIL: 'frank@brehm-online.com'
  EXPIRE_ARTIFACTS_IN: '1 week'
  FB_REPOSERVER_URL: 'http://repo.uhu-banane.de'
  FB_REPOSERVER_GPGKEY_URL: 'http://repo.uhu-banane.de/public/repo.uhu-banane.de.gpg-key2.asc'
  NOTIFY_ADDRESS: 'frank.brehm@pixelpark.com'
  PYTHON_INIT_FILE: 'lib/fb_logging/__init__.py'
  PYTHON_TEST_PATHS: 'bin lib setup.py'
  SENDER_ADDRESS: 'gitlab-ci@pixelpark.com'
  SHELLSCRIPTS: 'get-debian-version get-rpm-release get-rpm-version'
  SSH_PRIV_KEY_YUM_REPO: 'nada'
  UPDATE_ALL_PIP_MODULES: 'y'
  USED_TIMEZONE: 'Europe/Berlin'
  VERSION_PREFIX: 'unknown'
  YUM_REPO_GPG_ID: 'C0E73F70'
  YUM_REPO_GPG_PASSWD: ''
  YUM_REPO_HOST: 'repo02.pixelpark.com'
  YUM_REPO_USER: 'rpm-repo'
  YUM_REPO_DIR_HTTP: '/Linux/yum/pixelpark'
  YUM_REPO_DIR: "/srv/www/repo${YUM_REPO_DIR_HTTP}"
  YUM_REPO_GPG_KEY_PUB: 'nada'
  YUM_REPO_GPG_KEY_SEC: ''

# ---------------------------
.docker_job_definition:
  before_script:
    - locale -a
    - apt update && apt install --yes sudo locales gettext
    - >
      if test -f /etc/locale.gen; then
        echo "/etc/locale.gen:"
        grep -P -v '^\s*(#.*)?$' /etc/locale.gen || true
        echo "<-- EOF"
      fi
    - >
      if grep 'en_US.UTF-8' /etc/locale.gen; then
        sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
      else
        echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
      fi
    - >
      if grep 'de_DE.UTF-8' /etc/locale.gen; then
        sed -i -e 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
      else
        echo 'de_DE.UTF-8 UTF-8' >> /etc/locale.gen
      fi
    - locale-gen
    - locale -a
    - pip install --upgrade pip
    - pip install -r requirements.txt --upgrade --upgrade-strategy eager

# ---------------------------
.test-rules:
  stage: test
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_COMMIT_BRANCH =~ /test-.*/
    - if: $CI_COMMIT_BRANCH =~ /build.*/
    - if: $CI_COMMIT_BRANCH == "develop"
  tags:
    - docker
  script:
    - pip install --upgrade --upgrade-strategy eager pytest
    - pip list --format columns
    - pytest --verbose

# # ---------------------------
# # Removing when finished
# Linter:
#   stage: linter
#   extends:
#     - .docker_job_definition
#   image: python:3.10
#   tags:
#     - docker
#   script:
#     - apt install --yes shellcheck yamllint
#     - pip install --upgrade --upgrade-strategy eager flake8 pylint
#     - pip list --format columns
#     - 'echo; echo -e "flake8 bin lib setup.py"'
#     - flake8 bin lib setup.py
#     # - 'echo; echo -e "shellcheck -x compile-xlate-msgs.sh xtract-xlate-msgs.sh"'
#     # - shellcheck -x compile-xlate-msgs.sh xtract-xlate-msgs.sh
#     - 'echo; echo -e "yamllint -c .yamllint.yaml .gitlab-ci.yml"'
#     - yamllint -c .yamllint.yaml .gitlab-ci.yml
#   rules:
#     - if: '$CI_COMMIT_TAG'
#     - if: $CI_COMMIT_BRANCH == "master"
#     - if: $CI_COMMIT_BRANCH == "main"
#     - if: $CI_COMMIT_BRANCH == "test"
#     - if: $CI_COMMIT_BRANCH =~ /test-.*/
#     - if: $CI_COMMIT_BRANCH =~ /build.*/
#     - if: $CI_COMMIT_BRANCH == "develop"
#   needs:
#     - 'test Python 3.6'
#     - 'test Python 3.7'
#     - 'test Python 3.8'
#     - 'test Python 3.9'
#     - 'test Python 3.10'
#     - 'test Python 3.11'

# ---------------------------
.pkg-build-rules:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_COMMIT_BRANCH =~ /test-.*/
    - if: $CI_COMMIT_BRANCH =~ /build.*/
  tags:
    - docker
  needs:
    - 'Linter'
  variables:
    USED_CHARSET: 'utf8'
    USED_LOCALE: 'en_US'
    USED_LC: 'en_US.utf8'
    PKG_NAME: 'fb_logging'
    SRC_SPEC_FILE: 'template.spec'
    TGT_SPEC_FILE: "${PKG_NAME}.spec"
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .rpm-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - rpmdir/RPMS/*/*.rpm
      - rpmdir/SRPMS/*.src.rpm
    expire_in: '1 week'
  before_script:
    - ls -lA --color=always /etc/yum.repos.d
    - ${YUM} clean all
    - ${YUM} makecache
    - |
      echo "All locales"
      locale -a
    - |
      echo "Installing locales ..."
      if [[ "${EL_MAJOR_VERSION}" == "7" ]] ; then
        echo "${USED_LOCALE}.${USED_CHARSET}"
        localedef --charmap UTF-8 --inputfile "${USED_LOCALE}" "${USED_LC}"
      else
        dnf --assumeyes install langpacks-en glibc-all-langpacks
      fi
    - |
      echo "All locales"
      locale -a
      echo
      echo "locales:"
      locale
    - |
      echo "Exporting LC_ALL ..."
      export LC_ALL="${USED_LC}"
      echo
      echo "locales:"
      locale
    - |
      echo "Installing epel-release  ..."
      ${YUM} --assumeyes install epel-release
    - ${YUM} makecache
    - ${YUM} --assumeyes upgrade
    - ${YUM} --assumeyes install ${PYTHON_PACKAGES} gnupg2 rpm-build gettext
    - ls -l --color=always /bin/python* /bin/pip* || true
    - pip3 list --format columns
  script:
    - mkdir -pv rpmdir
    - mkdir -pv rpmdir/SOURCES
    - |
      echo "Creating source tar file ..."
      ODIR=$(pwd)
      ROOT_OBJECTS=$( ls -A1 | egrep -vw ".git|rpmdir" )
      PKG_VERSION=$( ./get-rpm-version )
      PKG_RELEASE=$( ./get-rpm-release )
      SRC_BASE="python${PYTHON_VERSION_NODOT}_${PKG_NAME}-${PKG_VERSION}"
      SRC_DIR="rpmdir/SOURCES/${SRC_BASE}"
      TAR_BASE="${PKG_NAME}.${PKG_VERSION}.tar.gz"
      SRC_TARBALL="rpmdir/SOURCES/${TAR_BASE}"
      echo "Version to build: ${PKG_VERSION}-${PKG_RELEASE}"
      echo "Sources directory: '${SRC_DIR}'"
      mkdir -pv "${SRC_DIR}"
      tar cf - ${ROOT_OBJECTS} | (cd "${SRC_DIR}" ; tar xf -)
      echo "Creating ${SRC_TARBALL} ..."
      cd rpmdir/SOURCES && tar cfz "${TAR_BASE}" "${SRC_BASE}"
      ls -lA --color=always
      cd "${ODIR}"
    - |
      echo "Generating '${TGT_SPEC_FILE}' ..."
      PKG_VERSION=$( ./get-rpm-version )
      PKG_RELEASE=$( ./get-rpm-release )
      cat "${SRC_SPEC_FILE}" | \
          sed -e "s/@@@Version@@@/$PKG_VERSION/gi" \
              -e "s/@@@Release@@@/${PKG_RELEASE}/gi" \
              -e "s/@@@py_version_dot@@@/${PYTHON_VERSION_DOT}/gi" \
              -e "s/@@@py_version_nodot@@@/${PYTHON_VERSION_NODOT}/gi" > "${TGT_SPEC_FILE}"
      python${PYTHON_VERSION_DOT} bin/dch2speclog debian/changelog >>"${TGT_SPEC_FILE}"
      echo "Generated spec-file:"
      cat "${TGT_SPEC_FILE}"
      echo "${PKG_VERSION}-${PKG_RELEASE}" > .rpm-version
    - |
      echo "Creating ${HOME}/.rpmmacros ..."
      echo "%__python3 /bin/python${PYTHON_VERSION_DOT}" > "${HOME}/.rpmmacros"
      echo "%_signature gpg" >> "${HOME}/.rpmmacros"
      echo "Generated ${HOME}/.rpmmacros:"
      cat "${HOME}/.rpmmacros"
    - |
      echo "Building RPM packages:"
      rpmbuild -ba --nocheck --verbose --define "_topdir $(pwd)/rpmdir" --define "version ${PKG_VERSION}" "${TGT_SPEC_FILE}"
    - |
      echo "Results:"
      find rpmdir/*RPMS -type f -print0 | xargs --null --no-run-if-empty ls -l -d --color=always

# ---------------------------
build CentOS 7 with Python 3.6:
  variables:
    EL_MAJOR_VERSION: '7'
    YUM: yum
    PYTHON_PACKAGES: >
      python36 python36-six python36-pip python36-devel python3-setuptools
    PYTHON_VERSION_DOT: '3.6'
    PYTHON_VERSION_NODOT: '36'
  extends:
    - '.pkg-build-rules'
  image: centos:7

# ---------------------------
build CentOS 8 with Python 3.8:
  variables:
    EL_MAJOR_VERSION: '8'
    YUM: dnf
    PYTHON_PACKAGES: >
      python38 python38-six python38-pip python38-devel python38-setuptools
      platform-python-devel
    PYTHON_VERSION_DOT: '3.8'
    PYTHON_VERSION_NODOT: '38'
  extends:
    - '.pkg-build-rules'
  image: dokken/centos-stream-8

# ---------------------------
build CentOS 9 with Python 3:
  variables:
    EL_MAJOR_VERSION: '9'
    YUM: dnf
    PYTHON_PACKAGES: >
      python3 python3-six python3-pip python3-devel python3-setuptools
    PYTHON_VERSION_DOT: '3'
    PYTHON_VERSION_NODOT: '3'
  extends:
    - '.pkg-build-rules'
  image: dokken/centos-stream-9

# ---------------------------
.pkg-sign-rules:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_COMMIT_BRANCH =~ /test-.*/
    - if: $CI_COMMIT_BRANCH =~ /build.*/
  stage: sign
  tags:
    - docker
  image: dokken/centos-stream-8
  before_script:
    - |
      echo "All locales"
      locale -a
    - |
      echo "Installing locales ..."
      dnf --assumeyes install langpacks-en glibc-all-langpacks
    - |
      echo "All locales"
      locale -a
      echo
      echo "locales:"
      locale
    - |
      echo "Exporting LC_ALL ..."
      export LC_ALL="${USED_LC}"
      echo
      echo "locales:"
      locale
    - yum makecache
    - yum --assumeyes upgrade
    - yum --assumeyes install rpm-sign expect
  script:
    - ls -lA rpmdir/RPMS/*/* rpmdir/SRPMS/*
    - |
      echo "Generating $HOME/.rpmmacros ..."
      echo -e "%_signature gpg\n%_gpg_name ${YUM_REPO_GPG_ID}" >$HOME/.rpmmacros
      echo -e "%__gpg_sign_cmd   %{__gpg} gpg --verbose --no-armor --batch --pinentry-mode loopback --passphrase '${YUM_REPO_GPG_PASSWD}' --no-secmem-warning -u \"%{_gpg_name}\" -sbo %{__signature_filename} %{__plaintext_filename}" >>$HOME/.rpmmacros
      echo "Generated $HOME/.rpmmacros:"
      echo "--------->"
      cat $HOME/.rpmmacros
      echo "<---------"
      echo
    - |
      echo "Tweaking /usr/lib/rpm/rpmpopt-* ..."
      ls -l /usr/lib/rpm/rpmpopt-*
      rpmoptfile=$( ls -1 /usr/lib/rpm/rpmpopt-* | head -n 1 )
      rpmoptfile_base=$( basename "${rpmoptfile}" )
      rpmoptfile_dir=$( dirname "${rpmoptfile}" )
      rpmoptfile_bak="${rpmoptfile_dir}/.~${rpmoptfile_base}.bak"
      cp -v -i "${rpmoptfile}" "${rpmoptfile_bak}"
      sed -i -e 's/\(--addsign.*\) <.*/\1\x27 \\/' "${rpmoptfile}"
      ls -l "${rpmoptfile}" "${rpmoptfile_bak}"
      diff -u "${rpmoptfile_bak}" "${rpmoptfile}" || true
      echo
    - |
      echo
      echo "Importing public GPG key ..."
      echo "$YUM_REPO_GPG_KEY_PUB" | gpg --import
      gpg --list-public-keys
      echo
      echo "Importing secret GPG key ..."
      pw='******'
      sec_key='******** Secret key ********'
      if [[ -z "${YUM_REPO_GPG_PASSWD}" ]] ; then
        pw=''
      fi
      if [[ -z "${YUM_REPO_GPG_KEY_SEC}" ]] ; then
        sec_key=''
      fi
      echo "echo '${sec_key}' | gpg --import --batch --pinentry-mode loopback --passphrase '${pw}'"
      echo "${YUM_REPO_GPG_KEY_SEC}" | gpg --import --batch --pinentry-mode loopback --passphrase "${YUM_REPO_GPG_PASSWD}"
      gpg --list-secret-keys
    - |
      echo
      echo "Signing packages ..."
      for f in $( find rpmdir -type f -iname "*.rpm" ) ; do
          echo "  * ${f} ..."
          echo "Checking existing signature:"
          rpm --checksig "${f}" || true
          rpmsign --addsign "${f}"
          echo "Checking new signature:"
          rpm --checksig "${f}" || true
          echo "Show signature:"
          rpm -q --qf '%{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n' -p "${f}" || true
      done
    - |
      echo "Results:"
      find rpmdir/*RPMS -type f -print0 | xargs --null --no-run-if-empty ls -l -d --color=always
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - rpmdir/RPMS/*/*.rpm
      - rpmdir/SRPMS/*.src.rpm
    expire_in: '1 week'

# ---------------------------
Sign EL 7 packages:
  extends:
    - '.pkg-sign-rules'
  needs:
    - 'build CentOS 7 with Python 3.6'
  dependencies:
    - 'build CentOS 7 with Python 3.6'

# ---------------------------
Sign EL 8 packages:
  extends:
    - '.pkg-sign-rules'
  needs:
    - 'build CentOS 8 with Python 3.8'
  dependencies:
    - 'build CentOS 8 with Python 3.8'

# ---------------------------
Sign EL 9 packages:
  extends:
    - '.pkg-sign-rules'
  needs:
    - 'build CentOS 9 with Python 3'
  dependencies:
    - 'build CentOS 9 with Python 3'

# ---------------------------
.rpm-pkg-deploy:
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true
  stage: deploy
  tags:
    - deploy_v2
  before_script:
    - hostname -f
    - whoami
    - pwd
    - ls -lA --color=always
    - find rpmdir/*RPMS -type f -print0 | xargs --null --no-run-if-empty ls -l -d --color=always
    - 'echo -e "YUM_REPO_USER: ${YUM_REPO_USER}"'
    - 'echo -e "YUM_REPO_HOST: ${YUM_REPO_HOST}"'
    - 'echo -e "YUM_REPO_DIR: ${YUM_REPO_DIR}"'
    - 'mkdir -pv "${HOME}/.ssh"'
    - 'chmod -v 0700 "${HOME}/.ssh"'
    - '/bin/echo "${SSH_PRIV_KEY_YUM_REPO}" > "${HOME}/.ssh/id_rsa"'
    - 'chmod -v 0600 "${HOME}/.ssh/id_rsa"'
    - 'ls -lA --color=always "${HOME}/.ssh"'
    - |
      if [[ -f "${HOME}/.ssh/config" ]] ; then
        echo "Content of ${HOME}/.ssh/config:"
        cat "${HOME}/.ssh/config"
        echo
      fi
  script:
    - echo "Packages to deploy:"; find rpmdir/*RPMS -type f -print0 | xargs --null --no-run-if-empty ls -l -d --color=always
    - |
      src_repo_dir="${YUM_REPO_DIR}/${EL_MAJOR_VERSION}-src"
      echo "Deploying source packages to ${YUM_REPO_HOST}:${src_repo_dir}/ ..."
      ssh -o StrictHostKeyChecking=no "${YUM_REPO_USER}@${YUM_REPO_HOST}" "if [ ! -d ${src_repo_dir} ] ; then mkdir -pv ${src_repo_dir} ; fi"
      scp -p -o StrictHostKeyChecking=no rpmdir/SRPMS/*.rpm "${YUM_REPO_USER}@${YUM_REPO_HOST}:${src_repo_dir}/"
      ssh -o StrictHostKeyChecking=no "${YUM_REPO_USER}@${YUM_REPO_HOST}" "cd ${src_repo_dir}/ && createrepo --update . && chmod -v a+x repodata && chmod -Rv a+r repodata"
    - |
      bin_repo_dir="${YUM_REPO_DIR}/${EL_MAJOR_VERSION}"
      echo "Deploying binary packages to ${YUM_REPO_HOST}:${bin_repo_dir}/ ..."
      ssh -o StrictHostKeyChecking=no "${YUM_REPO_USER}@${YUM_REPO_HOST}" "if [ ! -d ${bin_repo_dir} ] ; then mkdir -pv ${bin_repo_dir} ; fi"
      scp -p -o StrictHostKeyChecking=no rpmdir/RPMS/*/*.rpm "${YUM_REPO_USER}@${YUM_REPO_HOST}:${bin_repo_dir}/"
      ssh -o StrictHostKeyChecking=no "${YUM_REPO_USER}@${YUM_REPO_HOST}" "cd ${bin_repo_dir}/ && createrepo --update . && chmod -v a+x repodata && chmod -Rv a+r repodata"
  after_script:
    - rm -rf rpmdir
  environment:
    name: production

# ---------------------------
Deploy packages EL7:
  extends:
    - '.rpm-pkg-deploy'
  variables:
    EL_MAJOR_VERSION: '7'
  needs:
    - 'Sign EL 7 packages'
  dependencies:
    - 'Sign EL 7 packages'

# ---------------------------
Deploy packages EL8:
  extends:
    - '.rpm-pkg-deploy'
  variables:
    EL_MAJOR_VERSION: '8'
  needs:
    - 'Sign EL 8 packages'
  dependencies:
    - 'Sign EL 8 packages'

# ---------------------------
Deploy packages EL9:
  extends:
    - '.rpm-pkg-deploy'
  variables:
    EL_MAJOR_VERSION: '9'
  needs:
    - 'Sign EL 9 packages'
  dependencies:
    - 'Sign EL 9 packages'

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list
